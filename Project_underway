#pragma config(Sensor, S1, LightSensor, sensorLightActive)
#define ROW 7
#define COL 9
#define LSIZE 2

void ForwardOneSquare(void);
int LeftTurn(int circle);
int RightTurn(int circle);
void setSquareBlack(int **map, int *square);
void setNextSquare(int *next, int dir);
int * setCurrentSquare(int *next);
int * foundObj1(int *next);
int * foundObj2(int *next);
void setSquareWhite(int **array, int *square);
float * findObjectAngle(int *loc, int *obj);
void goHome(int *cur, int *start);

task main()
{
 int i;
 int j;

 /* Accurate turns calculation */
 //variables to store calculation data.
 float c_rotation;
 float c_distance;
 float temp;
 float circle;

 //variables to store initial values.
 float d1 = 51.0;// radius of wheel
 float d2 = 102.0;// lenght between both wheels
 float pie = 3.141592;

 //Calculation.
 c_rotation = (pie * d1);
 c_distance =(pie * d2);
 temp = (c_distance / c_rotation);
 circle = (temp * c_distance);

 //Mapping and direction tracking values
 //direction int
 //1 = col+1, 2 = row+1
 //3 = col-1, 4 = row-1
 int dir = 1;

 //map array
 int **map;
 map = (int *)calloc(ROW, sizeof(int *));
 *map = (int *)calloc(COL, sizeof(int));
 
 //current location array
 int *loc;
 loc = malloc(LSIZE*sizeof(int));
 *loc = 3;
 *(loc + 1) = 0;
 //next square array
 int *next;
 next = malloc(LSIZE*sizeof(int); 
 //start location square array
 const int *start;
 start = malloc(LSIZE*sizeof(int));
 *start = 3;
 *(start + 1) = 0;
 //object1 location array
 int *object1;
 object1 = malloc(LSIZE*sizeof(int));
 //object2 location array
 int *object2;
 object2 = malloc(LSIZE*sizeof(int));
 //objects found count
 int found_objects = 0;
 //arrays to hold data for moving
 //to found objects from start position
 //element 0 = distance
 //element 1 = radians
 float *go_to_object1;
 go_to_object1 = malloc(LSIZE*sizeof(int));
 float *go_to_object2;
 go_to_object2 = malloc(LSIZE*sizeof(int));
 
 
 /* Thresholdvalue */

 int light; // Variable to hold light value
 int Dark; // Variable to hold dark value
 int sum; // Variable to hold sum value
 int thresholdValue; // Variable to hold threshold value

 light = 65;
 Dark = 30;
 sum = light + Dark;
 thresholdValue = sum/2;

 wait1Msec(1000);

 int r = random(2);
 while(found_objects < 2)
 {
 while(SensorValue(sonarSensor) > 26)
 {
 if(SensorValue(LightSensor) < thresholdValue)
 {
 nxtDisplayCenteredTextLine(4, "Black cell");
 setSquareBlack(map, next);

 if(r == 1)
 {
 dir = LeftTurn(circle);
 }
 else
 {
 dir = RightTurn(circle);
 }

 setNextSquare(next, dir);

 } // End if()
 else
 {
 nxtDisplayCenteredTextLine(4, "white cell");
 setSquareWhite(map, next);
 ForwardOneSquare();
 loc = setCurrentSquare(next);
 setNextSquare(next, dir);
 } // End else()
 }//end while()
 int found_objects = found_objects + 1;
 goHome();
 } // End while()
go_to_object1 = findObjectAngle(start, object1);
go_to_object2 = findObjectangle(start, object2);
}

void ForwardOneSquare() // Forward function
{
 int distance_square = 290;// width of the square


 nMotorPIDSpeedCtrl[motorB] = mtrSpeedReg;
 nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;

 nMotorEncoder[motorB] = 0;
 nMotorEncoder[motorC] = 0;

 nMotorEncoderTarget[motorB] = distance_square;
 nMotorEncoderTarget[motorC] = distance_square;

 motor[motorB] = 20;
 motor[motorC] = 20;

 while(nMotorRunState[motorC] != runStateIdle)
 {
 wait1Msec(1000);
 }


 motor[motorB] = 0;
 motor[motorC] = 0;


} // End function

void LeftTurn(int circle)
{


 nMotorPIDSpeedCtrl[motorB] = mtrSpeedReg;
 nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;

 nMotorEncoder[motorB] = 0;
 nMotorEncoder[motorC] = 0;

 nMotorEncoderTarget[motorB] = circle *0.25;
 nMotorEncoderTarget[motorC] = -circle * 0.25;

 motor[motorB] = 20;
 motor[motorC] = -20;

 while(nMotorRunState[motorB] != runStateIdle)
 {

 }


 motor[motorB] = 0;
 motor[motorC] = 0;

 if(dir = 1)
 {
 dir = 4;
 }//end if
 if(dir = 2)
 {
 dir = 1;
 }//end if
 if(dir = 3)
 {
 dir = 2
 }//end if
 if(dir = 4)
 {
 dir = 3;
 }//end if
}

void RightTurn(int circle)
{



 nMotorPIDSpeedCtrl[motorB] = mtrSpeedReg;
 nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;

 nMotorEncoder[motorB] = 0;
 nMotorEncoder[motorC] = 0;

 nMotorEncoderTarget[motorB] = -circle *0.25;
 nMotorEncoderTarget[motorC] = circle * 0.25;

 motor[motorB] = -20;
 motor[motorC] = 20;

 while(nMotorRunState[motorB] != runStateIdle)
 {

 }


 motor[motorB] = 0;
 motor[motorC] = 0;

 if(dir = 1)
 {
 dir = 2;
 }//end if
 if(dir = 2)
 {
 dir = 3;
 }//end if
 if(dir = 3)
 {
 dir = 4
 }//end if
 if(dir = 4)
 {
 dir = 1;
 }//end if
}

void setSquareWhite(int **array, int *square)
{

 int i = *square;
 int j = *(square + 1);
 *(*(square + i) + j) = 1;
 
}//end setSquareWhite

//function to mark square as black
void setSquareBlack(int **array, int *square)
{

 int i = *square;
 int j = *(square + 1);
 *(*(array + i) + j) = 2;
 
}//end setSquareBlack


//function to set next square array
void setNextSquare(int *next, int dir)
{
 if(dir = 1)
 {
*(next + 1) = *(next + 1) + 1;
 }//end if
 if(dir = 2)
 {
 *next = *(next) + 1;
 }//end if
if(dir = 3)
{
*(next + 1) = *(next + 1) - 1;
}//end if
if(dir = 4)
{
*next = *(next) - 1;
}//end if

return next;
}//end setNextSquare()

//function to set current location square
int *setCurrentSquare(int *next)
{
 int *obj;
 obj = malloc(LSIZE*sizeof(int));
 *obj = *next;
 *(obj + 1) = *(next + 1);
 return(obj)
}//end setCurrentSquare()

//function to mark found object1 location
int * foundObj1(int *next)
{
 int *obj;
 obj = malloc(LSIZE*sizeof(int));
 *obj = *next;
 *(obj + 1) = *(next + 1);
 return(obj)
}//end foundObj1()

//function to mark found object2 location
int * foundObj2(int *next)
{
 int *obj;
 obj = malloc(LSIZE*sizeof(int));
 *obj = *next;
 *(obj + 1) = *(next + 1);
 return(obj)
}//end foundObj2()

//function to calculate angle to turn to face object
float *findObjectAngle(int *loc, int *obj)
{
 float i =(float) (*obj- *loc);
 float j =(float) (*(obj +1) - *(loc +1));
 float k;
 float y = (i*i) + (j*j);
 k = sqrt(y);
 float x;
 x = j/k;
 float angle = asin(x);
 float *object_dir;
 object_dir = malloc(LSIZE*sizeof(float));
 *object_dir = k;
 *(object_dir + 1) = angle;
 
 return(object_dir);
}//end findObjectAngle()
 
//function to return to the first square
void goHome(int *cur, int *start)
{

}//end goHome()
 
