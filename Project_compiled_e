#pragma config(Sensor, S4,     SonarSensor,          sensorSONAR)
#pragma config(Sensor, S1, LightSensor, sensorLightActive)
#pragma config(Motor,  motorB,          rightMotor,    tmotorNXT, openLoop, encoder)
#pragma config(Motor,  motorC,          leftMotor,     tmotorNXT, openLoop, encoder)


#define ROW 7
#define COL 9
#define LSIZE 2

//define global variables:
//2d array for mapping
int map[ROW][COL];
//array for start coordinates
int start[LSIZE];
//array for coordinates of next square
int next[LSIZE];
//array for coordinates of current square
int loc[LSIZE];
//array for coordinates of first object found
int object1[LSIZE];
//array for coordinates of second object found
int object2[LSIZE];

//array for distance and angle to object1 from start
float go_to_object1[LSIZE];
//array for distance and angle to object2 from start
float go_to_object2[LSIZE];


//function prototypes:
//functions to control movement
void ForwardOneSquare(void);
int LeftTurn(int circle, int dir);
int RightTurn(int circle, int dir);

//functions to update map array
void setSquareBlack(void);
void setSquareWhite(void);

//functions to update location data
void setNextSquare(int dir);
void setCurrentSquare(void);

//functions to update found object locations
void foundObj1(void);
void foundObj2(void);

//functions to calculate direction and distance
//to objects
void findObjectAngle1(void);
void findObjectAngle2(void);

//function to return to start position
int goHome(int circle, int dir);

//functions for variable turning left and right
void LeftTurnVar(int circle, float turn_measure);
void RightTurnVar(int circle, float turn_measure);

task main()
{
 /* Accurate turns calculation */
 //variables to store calculation data.
 float c_rotation;
 float c_distance;
 float temp;
 float circle;

 //variables to store initial values.
 float d1 = 51.0;// radius of wheel
 float d2 = 102.0;// lenght between both wheels
 float pie = 3.141592;

 //Calculation.
 c_rotation = (pie * d1);
 c_distance =(pie * d2);
 temp = (c_distance / c_rotation);
 circle = (temp * c_distance);

 //Mapping and direction tracking values
 //direction int
 //1 = col+1, 2 = row+1
 //3 = col-1, 4 = row-1
 int dir = 1;

 //current location
 loc[0] = 3;
 loc[1] = 0;

 //start location
 start[0] = 3;
 start[0] = 0;

 //next coordinates
 next[0] = 3;
 next[1] = 1;
 
 //objects found count
 int found_objects = 0;

 //index counter
 int i;
 
 
 /* Thresholdvalue */

 int light; // Variable to hold light value
 int Dark; // Variable to hold dark value
 int sum; // Variable to hold sum value
 int thresholdValue; // Variable to hold threshold value

 light = 65;
 Dark = 30;
 sum = light + Dark;
 thresholdValue = sum/2;

 wait1Msec(1000);
 
 //generate a random number
 //to be used in navigation
 srand(123);
	int r = random(2);
 
 //repeat until both objects found
 while(found_objects < 2)
 {

 if(SensorValue(LightSensor) < thresholdValue)
 {
 nxtDisplayCenteredTextLine(4, "Black cell");
 setSquareBlack();
 i = 0;
 
 if(dir == 1)//col + 1, left -row, right +row
 {
  if((map[(loc[0] -1)][loc[1]] == 0) && (map[(loc[0] + 1)][loc[1]] == 0))
  {
   if(r == 1)
   {
    dir = LeftTurn(circle, dir);
   }//end if
   else
   {
    dir = RightTurn(circle, dir);
   }//end else
   i = i + 1;
  }//end if
  else
  {
   if(map[(loc[0] - 1)][loc[1]] == 0)
   {
    dir = LeftTurn(circle, dir);
   }//end if
   if(map[(loc[0] + 1)][loc[1]] == 0)
   {
    dir = RightTurn(circle, dir);
   }//end if
   i = i + 1;
  }//end else
  }//end if  
  
  if(dir == 2)//row + 1, left +col, right - col
  {
   if((map[loc[0]][(loc[1] -1)] == 0) && (map[loc[0]][(loc[1] + 1)] == 0))
   {
    if(r == 1)
    {
     dir = LeftTurn(circle, dir);
    }//end if
    else
    {
     dir = RightTurn(circle, dir);
    }//end else
    i = i + 1;
   }//end if
   else
   {
    if(map[loc[0]][(loc[1] + 1)] == 0)
    {
     dir = LeftTurn(circle, dir);
    }//end if
    if(map[loc[0]][(loc[1] - 1)] == 0)
    {
     dir = RightTurn(circle, dir);
    }//end if
    i = i + 1;
   }//end else
  }//end if  
  
 if(dir == 3)//col - 1, left +row, right -row
 {
   if((map[(loc[0] - 1)][loc[1]] == 0) && (map[(loc[0] + 1)][loc[1]] == 0))
   {
    if(r == 1)
    {
     dir = LeftTurn(circle, dir);
    }//end if
    else
    {
     dir = RightTurn(circle, dir);
    }//end else
    i = i + 1;
    }//end if
    else
    {
     if(map[(loc[0] + 1)][loc[1]] == 0)
     {
      dir = LeftTurn(circle, dir);
     }//end if
     if(map[(loc[0] - 1)][loc[1]] == 0)
     {
      dir = RightTurn(circle, dir);
     }//end if
     i = i + 1;
    }//end else
 }//end if  
  
 if(dir == 4)//row - 1, left -col, right +col
 {
   if((map[loc[0]][(loc[1] -1)] == 0) && (map[loc[0]][(loc[1] + 1)] == 0))
   {
    if(r == 1)
    {
     dir = LeftTurn(circle, dir);
    }//end if
    else
    {
     dir = RightTurn(circle, dir);
    }//end else
    i = i + 1;
    }//end if
    else
    {
     if(map[loc[0]][(loc[1] - 1)] == 0)
     {
      dir = LeftTurn(circle, dir);
     }//end if
     if(map[loc[0]][(loc[1] + 1)] == 0)
     {
      dir = RightTurn(circle, dir);
     }//end if
     i = i + 1;
    }//end else
  }//end if  
 
 if(i == 0)
 {
  if(r == 1)
  {
   dir = LeftTurn(circle, dir);
  }//end if
  else
  {
  dir = RightTurn(circle, dir);
  }//end else
 }//end if
 setNextSquare(dir);

 } // End if()
 
 else
 {
 nxtDisplayCenteredTextLine(4, "white cell");
 setSquareWhite();
 if(SensorValue(SonarSensor) < 29)
 {
   if(found_objects == 0)
  {
   object1[0] = next[0];
   object1[1] = next[1];
   found_objects = found_objects + 1;
  }//end if
  if(found_objects == 1)
  {
   if ((next[0] == object1[0]) && (next[1] == object1[1]))
   {
    //first object found again
   }//end if
   else
   {
    object2[0] = next[0];
    object2[1] = next[1];
    found_objects = found_objects + 1;
   }//end else
  }//end if
  i = 0;
 
 if(dir == 1)//col + 1, left -row, right +row
 {
  if((map[(loc[0] -1)][loc[1]] == 0) && (map[(loc[0] + 1)][loc[1]] == 0))
  {
   if(r == 1)
   {
    dir = LeftTurn(circle, dir);
   }//end if
   else
   {
    dir = RightTurn(circle, dir);
   }//end else
   i = i + 1;
  }//end if
  else
  {
   if(map[(loc[0] - 1)][loc[1]] == 0)
   {
    dir = LeftTurn(circle, dir);
   }//end if
   if(map[(loc[0] + 1)][loc[1]] == 0)
   {
    dir = RightTurn(circle, dir);
   }//end if
   i = i + 1;
  }//end else
  }//end if  
  
  if(dir == 2)//row + 1, left +col, right - col
  {
   if((map[loc[0]][(loc[1] -1)] == 0) && (map[loc[0]][(loc[1] + 1)] == 0))
   {
    if(r == 1)
    {
     dir = LeftTurn(circle, dir);
    }//end if
    else
    {
     dir = RightTurn(circle, dir);
    }//end else
    i = i + 1;
   }//end if
   else
   {
    if(map[loc[0]][(loc[1] + 1)] == 0)
    {
     dir = LeftTurn(circle, dir);
    }//end if
    if(map[loc[0]][(loc[1] - 1)] == 0)
    {
     dir = RightTurn(circle, dir);
    }//end if
    i = i + 1;
   }//end else
  }//end if  
  
 if(dir == 3)//col - 1, left +row, right -row
 {
   if((map[(loc[0] - 1)][loc[1]] == 0) && (map[(loc[0] + 1)][loc[1]] == 0))
   {
    if(r == 1)
    {
     dir = LeftTurn(circle, dir);
    }//end if
    else
    {
     dir = RightTurn(circle, dir);
    }//end else
    i = i + 1;
    }//end if
    else
    {
     if(map[(loc[0] + 1)][loc[1]] == 0)
     {
      dir = LeftTurn(circle, dir);
     }//end if
     if(map[(loc[0] - 1)][loc[1]] == 0)
     {
      dir = RightTurn(circle, dir);
     }//end if
     i = i + 1;
    }//end else
 }//end if  
  
 if(dir == 4)//row - 1, left -col, right +col
 {
   if((map[loc[0]][(loc[1] -1)] == 0) && (map[loc[0]][(loc[1] + 1)] == 0))
   {
    if(r == 1)
    {
     dir = LeftTurn(circle, dir);
    }//end if
    else
    {
     dir = RightTurn(circle, dir);
    }//end else
    i = i + 1;
    }//end if
    else
    {
     if(map[loc[0]][(loc[1] - 1)] == 0)
     {
      dir = LeftTurn(circle, dir);
     }//end if
     if(map[loc[0]][(loc[1] + 1)] == 0)
     {
      dir = RightTurn(circle, dir);
     }//end if
     i = i + 1;
    }//end else
  }//end if  
 
 if(i == 0)
 {
  if(r == 1)
  {
   dir = LeftTurn(circle, dir);
  }//end if
  else
  {
  dir = RightTurn(circle, dir);
  }//end else
 }//end if
 
 setNextSquare(dir);
 }//end if
 else
 {
   if((next[0] < 0) || (next[0] > 6) || (next[1] < 0) || (next[1] > 8))
 {
  i = 0;
 
 if(dir == 1)//col + 1, left -row, right +row
 {
  if((map[(loc[0] -1)][loc[1]] == 0) && (map[(loc[0] + 1)][loc[1]] == 0))
  {
   if(r == 1)
   {
    dir = LeftTurn(circle, dir);
   }//end if
   else
   {
    dir = RightTurn(circle, dir);
   }//end else
   i = i + 1;
  }//end if
  else
  {
   if(map[(loc[0] - 1)][loc[1]] == 0)
   {
    dir = LeftTurn(circle, dir);
   }//end if
   if(map[(loc[0] + 1)][loc[1]] == 0)
   {
    dir = RightTurn(circle, dir);
   }//end if
   i = i + 1;
  }//end else
  }//end if  
  
  if(dir == 2)//row + 1, left +col, right - col
  {
   if((map[loc[0]][(loc[1] -1)] == 0) && (map[loc[0]][(loc[1] + 1)] == 0))
   {
    if(r == 1)
    {
     dir = LeftTurn(circle, dir);
    }//end if
    else
    {
     dir = RightTurn(circle, dir);
    }//end else
    i = i + 1;
   }//end if
   else
   {
    if(map[loc[0]][(loc[1] + 1)] == 0)
    {
     dir = LeftTurn(circle, dir);
    }//end if
    if(map[loc[0]][(loc[1] - 1)] == 0)
    {
     dir = RightTurn(circle, dir);
    }//end if
    i = i + 1;
   }//end else
  }//end if  
  
 if(dir == 3)//col - 1, left +row, right -row
 {
   if((map[(loc[0] - 1)][loc[1]] == 0) && (map[(loc[0] + 1)][loc[1]] == 0))
   {
    if(r == 1)
    {
     dir = LeftTurn(circle, dir);
    }//end if
    else
    {
     dir = RightTurn(circle, dir);
    }//end else
    i = i + 1;
    }//end if
    else
    {
     if(map[(loc[0] + 1)][loc[1]] == 0)
     {
      dir = LeftTurn(circle, dir);
     }//end if
     if(map[(loc[0] - 1)][loc[1]] == 0)
     {
      dir = RightTurn(circle, dir);
     }//end if
     i = i + 1;
    }//end else
 }//end if  
  
 if(dir == 4)//row - 1, left -col, right +col
 {
   if((map[loc[0]][(loc[1] -1)] == 0) && (map[loc[0]][(loc[1] + 1)] == 0))
   {
    if(r == 1)
    {
     dir = LeftTurn(circle, dir);
    }//end if
    else
    {
     dir = RightTurn(circle, dir);
    }//end else
    i = i + 1;
    }//end if
    else
    {
     if(map[loc[0]][(loc[1] - 1)] == 0)
     {
      dir = LeftTurn(circle, dir);
     }//end if
     if(map[loc[0]][(loc[1] + 1)] == 0)
     {
      dir = RightTurn(circle, dir);
     }//end if
     i = i + 1;
    }//end else
  }//end if  
 
 if(i == 0)
 {
  if(r == 1)
  {
   dir = LeftTurn(circle, dir);
  }//end if
  else
  {
  dir = RightTurn(circle, dir);
  }//end else
 }//end if
 setNextSquare(dir);
 } // End if()
  
  else
  {
  ForwardOneSquare();
  setCurrentSquare();
  setNextSquare(dir);
  }//end else
 }//end else
 } // End else()
 


}// End while()

dir = goHome(circle, dir);
findObjectAngle1();
findObjectAngle2();

}//end main()

void ForwardOneSquare() // Forward function
{
 int distance_square = 290;// width of the square

 nMotorPIDSpeedCtrl[motorB] = mtrSpeedReg;
 nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;

 nMotorEncoder[motorB] = 0;
 nMotorEncoder[motorC] = 0;

 nMotorEncoderTarget[motorB] = distance_square;
 nMotorEncoderTarget[motorC] = distance_square;

 motor[motorB] = 20;
 motor[motorC] = 20;

 while(nMotorRunState[motorC] != runStateIdle)
 {
 wait1Msec(1000);
 }


 motor[motorB] = 0;
 motor[motorC] = 0;


} // End function

//function to turn robot left
int LeftTurn(int circle, int dir)
{


 nMotorPIDSpeedCtrl[motorB] = mtrSpeedReg;
 nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;

 nMotorEncoder[motorB] = 0;
 nMotorEncoder[motorC] = 0;

 nMotorEncoderTarget[motorB] = circle *0.25;
 nMotorEncoderTarget[motorC] = -circle * 0.25;

 motor[motorB] = 20;
 motor[motorC] = -20;

 while(nMotorRunState[motorB] != runStateIdle)
 {

 }


 motor[motorB] = 0;
 motor[motorC] = 0;

//changing direction variable
 if(dir == 1)
 {
 dir = 4;
 }//end if
 if(dir == 2)
 {
 dir = 1;
 }//end if
 if(dir == 3)
 {
 dir = 2;
 }//end if
 if(dir == 4)
 {
 dir = 3;
 }//end if

 return(dir);
}

//function to turn right
int RightTurn(int circle, int dir)
{

 nMotorPIDSpeedCtrl[motorB] = mtrSpeedReg;
 nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;

 nMotorEncoder[motorB] = 0;
 nMotorEncoder[motorC] = 0;

 nMotorEncoderTarget[motorB] = -circle *0.25;
 nMotorEncoderTarget[motorC] = circle * 0.25;

 motor[motorB] = -20;
 motor[motorC] = 20;

 while(nMotorRunState[motorB] != runStateIdle)
 {

 }


 motor[motorB] = 0;
 motor[motorC] = 0;

//change direction variable
 if(dir == 1)
 {
 dir = 2;
 }//end if
 if(dir == 2)
 {
 dir = 3;
 }//end if
 if(dir == 3)
 {
 dir = 4;
 }//end if
 if(dir == 4)
 {
 dir = 1;
 }//end if

 return(dir);
}

//function to set next square on grid as white in array
void setSquareWhite()
{
 int i = next[0];
 int j = next[1];
 map[i][j] = 1;
}//end setSquareWhite

//function to mark square as black
void setSquareBlack()
{
 int i = next[0];
 int j = next[1];
 map[i][j] = 2;
}//end setSquareBlack


//function to set next square array
void setNextSquare(int dir)
{
 //check direction
 //then update array
 if(dir == 1)
 {
  next[1] = loc[1] + 1;
 }//end if
 if(dir == 2)
 {
  next[0] = loc[0] + 1;
 }//end if
 if(dir == 3)
 {
  next[1] = loc[1] - 1;
 }//end if
 if(dir == 4)
 {
  next[0] = loc[0] - 1;
 }//end if
}//end setNextSquare()

//function to set current location square
void setCurrentSquare()
{
 loc[0] = next[0];
 loc[1] = next[1];
}//end setCurrentSquare()

//function to mark found object1 location
void foundObj1()
{
 object1[0] = next[0];
 object1[1] = next[1];
}//end foundObj1()

//function to mark found object2 location
void foundObj2()
{
 object2[0] = next[0];
 object2[1] = next[1];
}//end foundObj2()

//function to calculate angle to turn to face object1
//and provide distance to object1
void findObjectAngle1()
{
 float i =(float) (object1[0] - loc[0])*290;//difference between rows
 float j =(float) (object1[1] - loc[1])*290;//difference between columns
 float distance;//variable to store hypotenuse (direct distance)
 
 //pythagoras
 float y = (i*i) + (j*j);
 distance = sqrt(y);
 
 //calculating angle using sine
 float x;
 x = j/distance;
 float angle = asin(x);
 angle = radiansToDegrees(angle);
 //update array
 go_to_object1[0] = distance;
 go_to_object1[1] = angle;
}//end findObjectAngle1()

//function same as findObjectAngle1() 
//due to reliance on global arrays this needed
//separate function.
void findObjectAngle2()
{
 float i =(float) (object2[0] - loc[0])*290;
 float j =(float) (object2[1] - loc[1])*290;
 float distance;
 float y = (i*i) + (j*j);
 distance = sqrt(y);
 float x;
 x = j/distance;
 float angle = asin(x);
 angle = radiansToDegrees(angle);
 go_to_object2[0] = distance;
 go_to_object2[1] = angle;
}//end findObjectAngle2()

//function to return to the first square
//works same as findObjectAngle1()
int goHome(int circle, int dir)
{
 //declare variables for temp and counter
 int a;
 int c;
 
 //check if robot is in the same row or column
 //if it is we can just turn the right direction
 // and move that many squares to be in start.
 if((start[0] == loc[0]) || (start[1] == loc[1]))
 {
  if(start[1] == loc[1])
  {
   a = loc[0] - start[0];
   if(a > 0)
   {
   //need to turn to dir 4
   if(dir == 1)
   {
    dir = LeftTurn(circle, dir);
   }//end if
   if(dir == 2)
   {
    dir = LeftTurn(circle, dir);
    dir = LeftTurn(circle, dir);
   }//end if
   if(dir == 3)
   {
    dir = RightTurn(circle, dir);
   }//end if
   for(c = 0; c < a; c++)
   {
    ForwardOneSquare();
    setCurrentSquare();
    setNextSquare(dir);
   }//end for
  }//end if
  else
  {
  //need direction 2
  if(dir == 1)
  {
   dir = RightTurn(circle, dir);
  }//end if
  if(dir == 3)
  {
   dir = LeftTurn(circle, dir);
  }//end if
  if(dir == 4)
  {
   dir = RightTurn(circle, dir);
   dir = RightTurn(circle, dir);
  }//end if
  for(c = 0; c < (a * (-1)); c++)
  {
   ForwardOneSquare();
   setCurrentSquare();
   setNextSquare(dir);
  }//end for
 }//end else
 //turn to face dir 1
 if(dir == 2)
 {
  dir = LeftTurn(circle, dir);
 }//end if
 if(dir == 3)
 {
  dir = LeftTurn(circle, dir);
  dir = LeftTurn(circle, dir);
 }//end if
 if(dir == 4)
 {
  dir = RightTurn(circle, dir);
 }//end if
 
}//end if
  
if(start[0] == loc[0])
{
 a = loc[1];
 //need to be facing dir 4
 if(dir == 3)
 {
  dir = LeftTurn(circle, dir);
 }//end if
 if(dir == 1)
 {
  dir = LeftTurn(circle, dir);
  dir = LeftTurn(circle, dir);
 }//end if
 if(dir == 2)
 {
  dir = RightTurn(circle, dir);
  }//end if
  for(c = 0; c < a; c++)
  {
   ForwardOneSquare();
   setCurrentSquare();
   setNextSquare(dir);
  }//end for
 }//end if
}//end if
 
 //if we're not on the same line as start
 else
 {
  float i =(float) (start[0] - loc[0])*290;
  float j =(float) (start[1] - loc[1])*290;
  float distance;
  float y = (i*i) + (j*j);
  distance = sqrt(y);
  float x;
  x = j/distance;
  float angle = asin(x);
  angle = radiansToDegrees(angle);
  float turn_measure = angle/360;
  
  if(i < 0)
  {
   //need dir to be 2
   if(dir == 1)
   {
    dir = RightTurn(circle, dir);
   }//end if
   if(dir == 3)
   {
    dir = LeftTurn(circle, dir);
   }//end if
   if(dir == 4)
   {
    dir = RightTurn(circle, dir);
    dir = RightTurn(circle, dir);
   }//end if
   LeftTurnVar(circle, turn_measure);
   
   nMotorPIDSpeedCtrl[motorB] = mtrSpeedReg;
   nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;

   nMotorEncoder[motorB] = 0;
   nMotorEncoder[motorC] = 0;

   nMotorEncoderTarget[motorB] = distance;
   nMotorEncoderTarget[motorC] = distance;

   motor[motorB] = 20;
   motor[motorC] = 20;

   while(nMotorRunState[motorC] != runStateIdle)
   {
    wait1Msec(1000);
   }


   motor[motorB] = 0;
   motor[motorC] = 0;
   
   LeftTurnVar(circle, (270 - turn_measure));//turn to face dir 1
  }//end if
  else
  {
   //need dir 4
   if(dir == 1)
   {
     dir = LeftTurn(circle, dir);
    }//end if
    if(dir == 2)
    { 
     dir = LeftTurn(circle, dir);
     dir = LeftTurn(circle, dir);
    }//end if
    if(dir == 3)
    {
     dir = RightTurn(circle, dir);
    }//end if
   }//end else
   RightTurnVar(circle, turn_measure);
      nMotorPIDSpeedCtrl[motorB] = mtrSpeedReg;
   nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;

   nMotorEncoder[motorB] = 0;
   nMotorEncoder[motorC] = 0;

   nMotorEncoderTarget[motorB] = distance;
   nMotorEncoderTarget[motorC] = distance;

   motor[motorB] = 20;
   motor[motorC] = 20;

   while(nMotorRunState[motorC] != runStateIdle)
   {
    wait1Msec(1000);
   }


   motor[motorB] = 0;
   motor[motorC] = 0;
   
   RightTurnVar(circle, (270 - turn_measure));//turn to face dir 1
 }//end else
 loc[0] = 3;
 loc[1] = 0;
 return(dir);
}//end goHome()

void LeftTurnVar(int circle, float turn_measure)
{
 nMotorPIDSpeedCtrl[motorB] = mtrSpeedReg;
 nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;

 nMotorEncoder[motorB] = 0;
 nMotorEncoder[motorC] = 0;

 nMotorEncoderTarget[motorB] = circle * turn_measure;
 nMotorEncoderTarget[motorC] = -circle * turn_measure;

 motor[motorB] = 20;
 motor[motorC] = -20;

 while(nMotorRunState[motorB] != runStateIdle)
 {

 }


 motor[motorB] = 0;
 motor[motorC] = 0;
}//end LeftTurnVar()

void RightTurnVar(int circle, float turn_measure)
{
 nMotorPIDSpeedCtrl[motorB] = mtrSpeedReg;
 nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;

 nMotorEncoder[motorB] = 0;
 nMotorEncoder[motorC] = 0;

 nMotorEncoderTarget[motorB] = -circle *turn_measure;
 nMotorEncoderTarget[motorC] = circle * turn_measure;

 motor[motorB] = -20;
 motor[motorC] = 20;

 while(nMotorRunState[motorB] != runStateIdle)
 {

 }

 motor[motorB] = 0;
 motor[motorC] = 0;
}//end RightTurnVar
